{"version":3,"sources":["components/CryptoChart.jsx","utils/chartHelpers.js","components/SearchBar.jsx","components/CurrencySelector.jsx","components/MarketOverview.jsx","utils/formatters.js","components/PriceCard.jsx","components/TimeframeSelector.jsx","services/api.js","hooks/useCryptoData.js","components/Dashboard.jsx","components/ThemeToggle.jsx","components/Notification.jsx","components/App.jsx","index.js"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","CryptoChart","_ref","data","selectedCurrency","selectedTimeframe","chartData","prices","labels","map","item","Date","toLocaleDateString","datasets","label","borderColor","backgroundColor","borderWidth","formatChartData","length","pointRadius","pointBackgroundColor","pointBorderColor","pointHoverRadius","pointHoverBackgroundColor","tension","fill","_jsxs","className","children","getTimeframeLabel","_jsx","style","height","position","Line","options","responsive","maintainAspectRatio","plugins","legend","display","font","family","size","color","tooltip","mode","intersect","titleColor","bodyColor","titleFont","weight","bodyFont","padding","cornerRadius","scales","x","grid","drawBorder","ticks","maxRotation","y","callback","value","toLocaleString","SearchBar","onSearch","query","setQuery","useState","xmlns","width","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","type","placeholder","onChange","e","target","onClick","CurrencySelector","currencies","selectedCurrencies","onCurrencyToggle","searchQuery","setSearchQuery","popularCurrencies","filteredCurrencies","useMemo","filter","currency","toLowerCase","includes","slice","MarketOverview","globalData","totalMarketCap","totalVolume","btcDominance","marketCapChange","formattedTime","toLocaleTimeString","hour","minute","hour12","d","Math","abs","toFixed","points","formatCurrency","amount","Intl","NumberFormat","format","PriceCard","price","change","volume","isActive","isFavorite","onFavoriteToggle","changeClass","changeIcon","stopPropagation","title","TimeframeSelector","onTimeframeChange","timeframe","BINANCE_API_BASE","useCryptoData","setData","marketData","loading","setLoading","error","setError","setSelectedCurrencies","setSelectedTimeframe","activeCurrency","setActiveCurrency","favorites","setFavorites","JSON","parse","localStorage","getItem","useEffect","async","symbols","axios","get","symbol","quoteAsset","id","baseAsset","name","console","fetchAvailableSymbols","prevData","s","err","fetchSymbols","fetchGlobalData","total_market_cap","usd","total_volume","market_cap_change_percentage_24h_usd","market_cap_percentage","btc","lastUpdated","fetchGlobalMarketData","globalDataInterval","setInterval","clearInterval","getData","interval","limit","days","getIntervalAndLimit","arguments","undefined","fullSymbol","toUpperCase","endsWith","params","kline","parseFloat","fetchCryptoData","marketDataList","baseCurrency","replace","current_price","lastPrice","price_change_percentage_24h","priceChangePercent","fetchCryptocurrencyData","marketDataMap","forEach","currencyData","find","toggleCurrency","prev","newActive","c","setChartCurrency","toggleFavorite","newFavorites","setItem","stringify","Dashboard","onPriceAlert","previousPricesRef","useRef","Object","keys","currentPrices","notifications","entries","_ref2","current","prevPrice","percentChange","direction","push","message","note","displayCurrencies","ThemeToggle","darkMode","toggleDarkMode","Notification","onDismiss","notificationQueue","setNotificationQueue","timer","setTimeout","dismissNotification","clearTimeout","App","setDarkMode","window","matchMedia","matches","setNotifications","document","documentElement","setAttribute","notification","now","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a220eef6.chunk.js","sourcesContent":["import React from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { formatChartData } from '../utils/chartHelpers';\n\n// Register Chart.js components including Filler for area charts\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\nconst CryptoChart = ({ data, selectedCurrency, selectedTimeframe }) => {\n    // Get timeframe label for display\n    const getTimeframeLabel = () => {\n        switch(selectedTimeframe) {\n            case '1': return 'Last 24 Hours';\n            case '7': return 'Last 7 Days';\n            case '30': return 'Last Month';\n            case '365': return 'Last Year';\n            case 'max': return 'All Time';\n            default: return '';\n        }\n    };\n    \n    // Format the data for the chart\n    const chartData = formatChartData({ prices: data });\n    \n    // Enhanced chart options for better visual appeal\n    const chartOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n            legend: {\n                display: true,\n                position: 'top',\n                labels: {\n                    font: {\n                        family: \"'Inter', sans-serif\",\n                        size: 12\n                    },\n                    color: '#212529'\n                }\n            },\n            tooltip: {\n                mode: 'index',\n                intersect: false,\n                backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                borderColor: 'rgba(0, 0, 0, 0.1)',\n                borderWidth: 1,\n                titleColor: '#212529',\n                bodyColor: '#212529',\n                titleFont: {\n                    family: \"'Inter', sans-serif\",\n                    size: 14,\n                    weight: 'bold'\n                },\n                bodyFont: {\n                    family: \"'Inter', sans-serif\",\n                    size: 13\n                },\n                padding: 12,\n                cornerRadius: 8\n            }\n        },\n        scales: {\n            x: {\n                grid: {\n                    display: false,\n                    drawBorder: false\n                },\n                ticks: {\n                    maxRotation: 0,\n                    font: {\n                        family: \"'Inter', sans-serif\",\n                        size: 11\n                    },\n                    color: '#6c757d'\n                }\n            },\n            y: {\n                grid: {\n                    color: 'rgba(0, 0, 0, 0.05)',\n                    drawBorder: false\n                },\n                ticks: {\n                    font: {\n                        family: \"'Inter', sans-serif\",\n                        size: 11\n                    },\n                    color: '#6c757d',\n                    callback: function(value) {\n                        return '$' + value.toLocaleString();\n                    }\n                }\n            }\n        }\n    };\n    \n    // Update dataset styling for better visuals\n    if (chartData && chartData.datasets && chartData.datasets.length > 0) {\n        chartData.datasets[0] = {\n            ...chartData.datasets[0],\n            label: `${selectedCurrency} Price`,\n            borderColor: '#3a86ff',\n            backgroundColor: 'rgba(58, 134, 255, 0.1)',\n            borderWidth: 2,\n            pointRadius: 3,\n            pointBackgroundColor: '#3a86ff',\n            pointBorderColor: '#ffffff',\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: '#3a86ff',\n            tension: 0.4,\n            fill: true\n        };\n    }\n    \n    if (!data || data.length === 0) {\n        return <div className=\"crypto-chart\">No chart data available</div>;\n    }\n\n    return (\n        <div className=\"crypto-chart\">\n            <h2>{selectedCurrency}/USDT - {getTimeframeLabel()}</h2>\n            <div style={{ height: '400px', position: 'relative' }}>\n                <Line data={chartData} options={chartOptions} />\n            </div>\n        </div>\n    );\n};\n\nexport default CryptoChart;","export const getChartOptions = (title) => {\n    return {\n        responsive: true,\n        plugins: {\n            legend: {\n                position: 'top',\n            },\n            title: {\n                display: true,\n                text: title,\n            },\n        },\n    };\n};\n\nexport const transformChartData = (data) => {\n    return {\n        labels: data.map(item => item.timestamp),\n        datasets: [\n            {\n                label: 'Price',\n                data: data.map(item => item.price),\n                borderColor: 'rgba(75, 192, 192, 1)',\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                borderWidth: 1,\n            },\n        ],\n    };\n};\n\n// Adding this function to match what's being imported in CryptoChart.jsx\nexport const formatChartData = (data) => {\n    // Format data from the API for chart.js\n    if (!data || !data.prices) {\n        return {\n            labels: [],\n            datasets: [{\n                label: 'Price',\n                data: [],\n                borderColor: 'rgba(75, 192, 192, 1)',\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                borderWidth: 1,\n            }]\n        };\n    }\n\n    const timestamps = data.prices.map(item => {\n        const date = new Date(item[0]);\n        return date.toLocaleDateString();\n    });\n\n    const prices = data.prices.map(item => item[1]);\n\n    return {\n        labels: timestamps,\n        datasets: [{\n            label: 'Price',\n            data: prices,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderWidth: 1,\n        }]\n    };\n};","import React, { useState } from 'react';\r\n\r\nconst SearchBar = ({ onSearch }) => {\r\n    const [query, setQuery] = useState('');\r\n\r\n    const handleSearchChange = (e) => {\r\n        const value = e.target.value;\r\n        setQuery(value);\r\n        onSearch(value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-bar\">\r\n            <div className=\"search-input-container\">\r\n                <svg \r\n                    xmlns=\"http://www.w3.org/2000/svg\" \r\n                    width=\"18\" \r\n                    height=\"18\" \r\n                    viewBox=\"0 0 24 24\" \r\n                    fill=\"none\" \r\n                    stroke=\"currentColor\" \r\n                    strokeWidth=\"2\" \r\n                    strokeLinecap=\"round\" \r\n                    strokeLinejoin=\"round\" \r\n                    className=\"search-icon\"\r\n                >\r\n                    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\r\n                    <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\r\n                </svg>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search cryptocurrencies...\"\r\n                    value={query}\r\n                    onChange={handleSearchChange}\r\n                    className=\"search-input\"\r\n                />\r\n                {query && (\r\n                    <button \r\n                        className=\"clear-search\" \r\n                        onClick={() => {\r\n                            setQuery('');\r\n                            onSearch('');\r\n                        }}\r\n                    >\r\n                        <svg \r\n                            xmlns=\"http://www.w3.org/2000/svg\" \r\n                            width=\"16\" \r\n                            height=\"16\" \r\n                            viewBox=\"0 0 24 24\" \r\n                            fill=\"none\" \r\n                            stroke=\"currentColor\" \r\n                            strokeWidth=\"2\" \r\n                            strokeLinecap=\"round\" \r\n                            strokeLinejoin=\"round\"\r\n                        >\r\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                        </svg>\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;","import React, { useState, useMemo } from 'react';\nimport SearchBar from './SearchBar';\n\nconst CurrencySelector = ({ currencies, selectedCurrencies, onCurrencyToggle }) => {\n    const [searchQuery, setSearchQuery] = useState('');\n    \n    // Popular cryptocurrencies to show by default\n    const popularCurrencies = ['BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'DOGE', 'DOT', 'AVAX', 'MATIC'];\n    \n    // Filter the available currencies based on search query\n    const filteredCurrencies = useMemo(() => {\n        if (!currencies || currencies.length === 0) return ['BTC'];\n        \n        if (!searchQuery) {\n            // Just show popular currencies if no search query\n            return currencies.filter(currency => popularCurrencies.includes(currency));\n        }\n        \n        // Otherwise filter based on search query (case insensitive)\n        return currencies.filter(currency => \n            currency.toLowerCase().includes(searchQuery.toLowerCase())\n        ).slice(0, 20); // Limit to 20 results for performance\n    }, [currencies, searchQuery]);\n\n    return (\n        <div className=\"currency-selector\">\n            <h3>Select Cryptocurrencies</h3>\n            \n            <SearchBar onSearch={setSearchQuery} />\n            \n            <div className=\"currency-buttons\">\n                {filteredCurrencies.map((currency) => (\n                    <button\n                        key={currency}\n                        className={`currency-button ${selectedCurrencies.includes(currency) ? 'selected' : ''}`}\n                        onClick={() => onCurrencyToggle(currency)}\n                    >\n                        {currency}\n                    </button>\n                ))}\n            </div>\n            \n            <div className=\"selector-info\">\n                {searchQuery ? (\n                    <small>Showing {filteredCurrencies.length} results for \"{searchQuery}\"</small>\n                ) : (\n                    <small>Showing popular coins from Binance</small>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default CurrencySelector;","import React from 'react';\r\n\r\nconst MarketOverview = ({ globalData }) => {\r\n    const {\r\n        totalMarketCap,\r\n        totalVolume,\r\n        btcDominance,\r\n        marketCapChange\r\n    } = globalData;\r\n\r\n    // Format the timestamp\r\n    const formattedTime = new Date().toLocaleTimeString([], {\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        hour12: true\r\n    });\r\n\r\n    return (\r\n        <div className=\"market-overview\">\r\n            <div className=\"market-overview-header\">\r\n                <h3>Market Overview</h3>\r\n                <div className=\"last-updated\">\r\n                    <span className=\"update-label\">LAST UPDATED</span>\r\n                    <span className=\"update-time\">{formattedTime}</span>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"market-stats-inline\">\r\n                <div className=\"stat-inline market-cap\">\r\n                    <div className=\"stat-icon\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                            <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\r\n                            <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"stat-content\">\r\n                        <div className=\"stat-title\">Total Market Cap</div>\r\n                        <div className=\"stat-value\">${totalMarketCap.toLocaleString()}</div>\r\n                        <div className={`stat-change ${marketCapChange >= 0 ? 'positive' : 'negative'}`}>\r\n                            {marketCapChange >= 0 ? '↑' : '↓'} {Math.abs(marketCapChange).toFixed(2)}%\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-inline volume\">\r\n                    <div className=\"stat-icon\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                            <polyline points=\"22 12 18 12 15 21 9 3 6 12 2 12\"></polyline>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"stat-content\">\r\n                        <div className=\"stat-title\">24h Volume</div>\r\n                        <div className=\"stat-value\">${totalVolume.toLocaleString()}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"stat-inline btc-dominance\">\r\n                    <div className=\"stat-icon\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                            <path d=\"M12 2a8 8 0 1 0 0 16 8 8 0 1 0 0-16z\"></path>\r\n                            <path d=\"M15.65 9.35a3.5 3.5 0 0 1-6.3 0\"></path>\r\n                            <path d=\"M17 5c0 2-2 3-2 3\"></path>\r\n                            <path d=\"M9 5c0 2-2 3-2 3\"></path>\r\n                        </svg>\r\n                    </div>\r\n                    <div className=\"stat-content\">\r\n                        <div className=\"stat-title\">BTC Dominance</div>\r\n                        <div className=\"stat-value\">{btcDominance.toFixed(1)}%</div>\r\n                        <div className=\"stat-progress\">\r\n                            <div className=\"progress-bar\" style={{ width: `${btcDominance}%` }}></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MarketOverview;","export const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n    }).format(amount);\n};\n\nexport const formatPercentage = (value) => {\n    return `${value.toFixed(2)}%`;\n};\n\nexport const formatDate = (dateString) => {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n};","import React from 'react';\nimport { formatCurrency, formatPercentage } from '../utils/formatters';\n\nconst PriceCard = ({ \n    currency, \n    price, \n    change, \n    volume, \n    isActive, \n    onClick, \n    isFavorite, \n    onFavoriteToggle \n}) => {\n    // Determine styling classes based on price change\n    const changeClass = change >= 0 ? 'change-positive' : 'change-negative';\n    const changeIcon = change >= 0 ? '↑' : '↓';\n    \n    // Handle favorite toggle without triggering the card click\n    const handleFavoriteClick = (e) => {\n        e.stopPropagation(); // Prevent card click\n        onFavoriteToggle(currency);\n    };\n    \n    return (\n        <div \n            className={`price-card ${isActive ? 'active' : ''}`}\n            onClick={() => onClick(currency)}\n        >\n            <div className=\"price-card-header\">\n                <h2>{currency}/USDT</h2>\n                <button \n                    className={`favorite-button ${isFavorite ? 'active' : ''}`}\n                    onClick={handleFavoriteClick}\n                    title={isFavorite ? \"Remove from favorites\" : \"Add to favorites\"}\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill={isFavorite ? \"currentColor\" : \"none\"} stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                        <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n                    </svg>\n                </button>\n            </div>\n            \n            <p>\n                <span className=\"label\">Current Price:</span>\n                <span className=\"price-value\">{formatCurrency(price)}</span>\n            </p>\n            \n            <p>\n                <span className=\"label\">24h Change:</span>\n                <span className={changeClass}>\n                    {changeIcon} {formatPercentage(change)}\n                </span>\n            </p>\n            \n            <p>\n                <span className=\"label\">24h Volume:</span>\n                <span>{formatCurrency(volume)}</span>\n            </p>\n            \n            {isActive && <div className=\"active-indicator\">Active</div>}\n        </div>\n    );\n};\n\nexport default PriceCard;","import React from 'react';\n\nconst TimeframeSelector = ({ selectedTimeframe, onTimeframeChange }) => {\n    // Define timeframes with their display labels and API values\n    // Values match the days parameters used in useCryptoData\n    const timeframes = [\n        { label: '24H', value: '1' },\n        { label: '7D', value: '7' },\n        { label: '1M', value: '30' },\n        { label: '1Y', value: '365' },\n        { label: 'ALL', value: 'max' }\n    ];\n\n    return (\n        <div className=\"timeframe-selector\">\n            <h3>Timeframe</h3>\n            <ul>\n                {timeframes.map((timeframe) => (\n                    <li \n                        key={timeframe.label} \n                        className={selectedTimeframe === timeframe.value ? 'active' : ''}\n                    >\n                        <button onClick={() => onTimeframeChange(timeframe.value)}>\n                            {timeframe.label}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TimeframeSelector;","import axios from 'axios';\n\n// Binance API endpoints\nconst BINANCE_API_BASE = 'https://api.binance.com/api/v3';\n// CoinGecko API for global market data\nconst COINGECKO_API_BASE = 'https://api.coingecko.com/api/v3';\n\n// Fetch list of available coins/symbols from Binance\nexport const fetchAvailableSymbols = async () => {\n    try {\n        const response = await axios.get(`${BINANCE_API_BASE}/exchangeInfo`);\n        // Extract symbol information from the response\n        const symbols = response.data.symbols\n            .filter(symbol => symbol.quoteAsset === 'USDT') // Filter for USDT pairs for simplicity\n            .map(symbol => ({\n                id: symbol.symbol,\n                symbol: symbol.baseAsset,\n                name: symbol.baseAsset\n            }));\n        return symbols;\n    } catch (error) {\n        console.error('Error fetching available symbols:', error);\n        throw error;\n    }\n};\n\n// Fetch current price data for a specific symbol\nexport const fetchCryptoData = async (symbol, interval = '1d', limit = 30) => {\n    try {\n        // Make sure we append USDT if not already present\n        const fullSymbol = symbol.toUpperCase().endsWith('USDT') \n            ? symbol.toUpperCase() \n            : `${symbol.toUpperCase()}USDT`;\n            \n        const response = await axios.get(`${BINANCE_API_BASE}/klines`, {\n            params: {\n                symbol: fullSymbol,\n                interval: interval,\n                limit: limit\n            }\n        });\n        \n        // Transform the klines data to a more usable format\n        // Binance kline format: [openTime, open, high, low, close, volume, closeTime, ...]\n        const prices = response.data.map(kline => [kline[0], parseFloat(kline[4])]); // Use closeTime and close price\n        \n        return {\n            prices: prices\n        };\n    } catch (error) {\n        console.error('Error fetching crypto data:', error);\n        throw error;\n    }\n};\n\n// Fetch current market data for multiple symbols\nexport const fetchCryptocurrencyData = async (baseCurrency = 'USDT', limit = 10) => {\n    try {\n        // Get 24hr ticker price change statistics\n        const response = await axios.get(`${BINANCE_API_BASE}/ticker/24hr`);\n        \n        // Filter for pairs with the specified base currency (e.g., USDT)\n        const filteredData = response.data\n            .filter(item => item.symbol.endsWith(baseCurrency))\n            .slice(0, limit)\n            .map(item => ({\n                id: item.symbol,\n                symbol: item.symbol.replace(baseCurrency, ''),\n                current_price: parseFloat(item.lastPrice),\n                price_change_percentage_24h: parseFloat(item.priceChangePercent),\n                total_volume: parseFloat(item.volume)\n            }));\n            \n        return filteredData;\n    } catch (error) {\n        console.error('Error fetching cryptocurrency data:', error);\n        throw error;\n    }\n};\n\n// Fetch historical klines data for a specific symbol\nexport const fetchHistoricalData = async (symbol, interval = '1d', limit = 30) => {\n    try {\n        // Make sure we append USDT if not already present\n        const fullSymbol = symbol.toUpperCase().endsWith('USDT') \n            ? symbol.toUpperCase() \n            : `${symbol.toUpperCase()}USDT`;\n            \n        const response = await axios.get(`${BINANCE_API_BASE}/klines`, {\n            params: {\n                symbol: fullSymbol,\n                interval: interval,\n                limit: limit\n            }\n        });\n        \n        // Transform the klines data\n        const prices = response.data.map(kline => [kline[0], parseFloat(kline[4])]);\n        \n        return {\n            prices: prices\n        };\n    } catch (error) {\n        console.error('Error fetching historical data:', error);\n        throw error;\n    }\n};\n\n// Fetch global market data from CoinGecko\nexport const fetchGlobalMarketData = async () => {\n    try {\n        const response = await axios.get(`${COINGECKO_API_BASE}/global`);\n        const data = response.data.data;\n        \n        return {\n            totalMarketCap: data.total_market_cap.usd || 0,\n            totalVolume: data.total_volume.usd || 0,\n            marketCapChange: data.market_cap_change_percentage_24h_usd || 0,\n            btcDominance: data.market_cap_percentage.btc || 0,\n            lastUpdated: new Date()\n        };\n    } catch (error) {\n        console.error('Error fetching global market data:', error);\n        // Return fallback data if API call fails\n        return {\n            totalMarketCap: 2345678901234,\n            totalVolume: 123456789012,\n            marketCapChange: 2.5,\n            btcDominance: 45.2,\n            lastUpdated: new Date()\n        };\n    }\n};","import { useState, useEffect } from 'react';\nimport { \n    fetchCryptoData, \n    fetchCryptocurrencyData, \n    fetchAvailableSymbols, \n    fetchGlobalMarketData \n} from '../services/api';\n\nconst useCryptoData = () => {\n    // Initialize with default structure to prevent undefined access errors\n    const [data, setData] = useState({\n        prices: [],\n        currencies: [], // Will be populated with available cryptocurrencies from Binance\n        marketData: {},  // Will hold data for multiple currencies\n        globalData: {\n            totalMarketCap: 0,\n            totalVolume: 0,\n            btcDominance: 0,\n            marketCapChange: 0\n        }\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedCurrencies, setSelectedCurrencies] = useState(['BTC']); // Default to Bitcoin\n    const [selectedTimeframe, setSelectedTimeframe] = useState('7'); // Default timeframe in days\n    const [activeCurrency, setActiveCurrency] = useState('BTC'); // For chart display\n    const [favorites, setFavorites] = useState(\n        JSON.parse(localStorage.getItem('cryptoFavorites')) || []\n    );\n    \n    // Map timeframe days to Binance kline interval\n    const getIntervalAndLimit = (days) => {\n        switch(days) {\n            case '1': return { interval: '1h', limit: 24 };\n            case '7': return { interval: '4h', limit: 42 };\n            case '30': return { interval: '1d', limit: 30 };\n            case '365': return { interval: '1w', limit: 52 };\n            case 'max': return { interval: '1M', limit: 60 };\n            default: return { interval: '1d', limit: 30 };\n        }\n    };\n\n    // Toggle currencies in the selected list\n    const toggleCurrency = (currency) => {\n        setSelectedCurrencies(prev => {\n            if (prev.includes(currency)) {\n                // If removing the active currency, set a new active currency\n                if (currency === activeCurrency && prev.length > 1) {\n                    const newActive = prev.find(c => c !== currency) || 'BTC';\n                    setActiveCurrency(newActive);\n                }\n                // Don't allow removing the last currency\n                return prev.length > 1 ? prev.filter(c => c !== currency) : prev;\n            } else {\n                return [...prev, currency];\n            }\n        });\n    };\n\n    // Set which currency is active for the chart display\n    const setChartCurrency = (currency) => {\n        if (selectedCurrencies.includes(currency)) {\n            setActiveCurrency(currency);\n        }\n    };\n    \n    // Toggle currency in favorites\n    const toggleFavorite = (currency) => {\n        setFavorites(prev => {\n            const newFavorites = prev.includes(currency) \n                ? prev.filter(c => c !== currency)\n                : [...prev, currency];\n                \n            // Save to localStorage\n            localStorage.setItem('cryptoFavorites', JSON.stringify(newFavorites));\n            return newFavorites;\n        });\n    };\n\n    useEffect(() => {\n        // Fetch all available crypto symbols when the component first loads\n        const fetchSymbols = async () => {\n            try {\n                const symbols = await fetchAvailableSymbols();\n                setData(prevData => ({\n                    ...prevData,\n                    currencies: symbols.map(s => s.symbol)\n                }));\n            } catch (err) {\n                console.error(\"Error fetching available symbols:\", err);\n                setError(err);\n            }\n        };\n        \n        fetchSymbols();\n        \n        // Fetch global market data on initial load\n        const fetchGlobalData = async () => {\n            try {\n                const globalData = await fetchGlobalMarketData();\n                setData(prevData => ({\n                    ...prevData,\n                    globalData\n                }));\n            } catch (err) {\n                console.error(\"Error fetching global market data:\", err);\n            }\n        };\n        \n        fetchGlobalData();\n        \n        // Set up interval to refresh global data every 5 minutes\n        const globalDataInterval = setInterval(fetchGlobalData, 5 * 60 * 1000);\n        \n        return () => clearInterval(globalDataInterval);\n    }, []);\n\n    useEffect(() => {\n        const getData = async () => {\n            setLoading(true);\n            try {\n                const { interval, limit } = getIntervalAndLimit(selectedTimeframe);\n                \n                // Fetch price chart data for the active currency\n                const chartData = await fetchCryptoData(activeCurrency, interval, limit);\n                \n                // Fetch current market data for all currencies\n                const marketDataList = await fetchCryptocurrencyData('USDT', 50);\n                \n                // Create a mapped object of market data keyed by currency\n                const marketDataMap = {};\n                \n                // Filter to only include selected currencies and format the data\n                selectedCurrencies.forEach(currency => {\n                    const currencyData = marketDataList.find(item => item.symbol === currency);\n                    \n                    if (currencyData) {\n                        marketDataMap[currency] = {\n                            price: currencyData.current_price || 0,\n                            change: currencyData.price_change_percentage_24h || 0,\n                            volume: currencyData.total_volume || 0\n                        };\n                    }\n                });\n                \n                // Transform data into the format our components expect\n                setData(prevData => ({\n                    ...prevData,\n                    prices: chartData.prices || [],\n                    marketData: marketDataMap\n                }));\n            } catch (err) {\n                console.error(\"Error in useCryptoData:\", err);\n                setError(err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (selectedCurrencies.length > 0) {\n            getData();\n        }\n    }, [selectedCurrencies, selectedTimeframe, activeCurrency]);\n\n    return { \n        data, \n        loading, \n        error, \n        selectedCurrencies,\n        toggleCurrency,\n        activeCurrency,\n        setChartCurrency,\n        selectedTimeframe, \n        setSelectedTimeframe,\n        favorites,\n        toggleFavorite,\n        isFavorite: (currency) => favorites.includes(currency)\n    };\n};\n\nexport default useCryptoData;","import React, { useState, useEffect, useRef } from 'react';\nimport CryptoChart from './CryptoChart';\nimport CurrencySelector from './CurrencySelector';\nimport MarketOverview from './MarketOverview';\nimport PriceCard from './PriceCard';\nimport TimeframeSelector from './TimeframeSelector';\nimport useCryptoData from '../hooks/useCryptoData';\n\nconst Dashboard = ({ onPriceAlert }) => {\n    const { \n        data, \n        loading, \n        error, \n        selectedCurrencies, \n        toggleCurrency, \n        activeCurrency,\n        setChartCurrency,\n        selectedTimeframe, \n        setSelectedTimeframe,\n        favorites,\n        toggleFavorite,\n        isFavorite\n    } = useCryptoData();\n    \n    // Removed showOnlyFavorites state since we're removing the filter button\n    const previousPricesRef = useRef({});\n    \n    // Watch for significant price changes and trigger alerts\n    useEffect(() => {\n        // Skip if no market data yet or no previous prices to compare\n        if (!data.marketData || Object.keys(data.marketData).length === 0) return;\n        \n        const currentPrices = {};\n        let notifications = [];\n        \n        // Build current prices object and check for significant changes\n        Object.entries(data.marketData).forEach(([currency, currencyData]) => {\n            currentPrices[currency] = currencyData.price;\n            \n            // Check if we have a previous price to compare\n            if (previousPricesRef.current[currency]) {\n                const prevPrice = previousPricesRef.current[currency];\n                const currentPrice = currencyData.price;\n                \n                // Calculate percentage change\n                const percentChange = ((currentPrice - prevPrice) / prevPrice) * 100;\n                \n                // Trigger notifications for significant changes (5% or more)\n                if (Math.abs(percentChange) >= 5) {\n                    const direction = percentChange > 0 ? 'increased' : 'decreased';\n                    const type = percentChange > 0 ? 'success' : 'error';\n                    \n                    // Only notify if the user has selected this currency\n                    if (selectedCurrencies.includes(currency)) {\n                        notifications.push({\n                            currency,\n                            message: `${currency} has ${direction} by ${Math.abs(percentChange).toFixed(2)}% in the last update`,\n                            type\n                        });\n                    }\n                }\n            }\n        });\n        \n        // Send notifications\n        notifications.forEach(note => {\n            if (onPriceAlert) {\n                onPriceAlert(note.currency, note.message, note.type);\n            }\n        });\n        \n        // Update previous prices reference\n        previousPricesRef.current = currentPrices;\n    }, [data.marketData, selectedCurrencies, onPriceAlert]);\n\n    if (loading) return <div className=\"loading\">Loading cryptocurrency data...</div>;\n    if (error) return <div className=\"error\">Error fetching data: {error.message}</div>;\n    \n    // Display all selected currencies - removed filtering by favorites\n    const displayCurrencies = selectedCurrencies;\n\n    return (\n        <div className=\"dashboard container\">\n            <MarketOverview globalData={data.globalData} />\n            \n            <div className=\"selectors-container\">\n                <CurrencySelector \n                    currencies={data.currencies} \n                    selectedCurrencies={selectedCurrencies} \n                    onCurrencyToggle={toggleCurrency} \n                />\n                <TimeframeSelector \n                    selectedTimeframe={selectedTimeframe} \n                    onTimeframeChange={setSelectedTimeframe} \n                />\n            </div>\n            \n            {/* Favorites filter button removed */}\n            \n            <div className=\"price-cards-container\">\n                {displayCurrencies.map(currency => {\n                    const currencyData = data.marketData[currency] || {\n                        price: 0,\n                        change: 0,\n                        volume: 0\n                    };\n                    \n                    return (\n                        <PriceCard \n                            key={currency}\n                            currency={currency}\n                            price={currencyData.price}\n                            change={currencyData.change}\n                            volume={currencyData.volume}\n                            isActive={currency === activeCurrency}\n                            onClick={setChartCurrency}\n                            isFavorite={isFavorite(currency)}\n                            onFavoriteToggle={toggleFavorite}\n                        />\n                    );\n                })}\n            </div>\n            \n            <CryptoChart \n                data={data.prices} \n                selectedCurrency={activeCurrency} \n                selectedTimeframe={selectedTimeframe} \n            />\n        </div>\n    );\n};\n\nexport default Dashboard;","import React from 'react';\r\n\r\nconst ThemeToggle = ({ darkMode, toggleDarkMode }) => {\r\n    return (\r\n        <div className=\"theme-toggle\">\r\n            <button \r\n                onClick={toggleDarkMode} \r\n                title={darkMode ? \"Switch to light mode\" : \"Switch to dark mode\"}\r\n                className={`theme-toggle-btn ${darkMode ? 'dark' : 'light'}`}\r\n            >\r\n                {darkMode ? (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"5\"></circle>\r\n                        <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\"></line>\r\n                        <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line>\r\n                        <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\"></line>\r\n                        <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\"></line>\r\n                        <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\"></line>\r\n                        <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\"></line>\r\n                        <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\"></line>\r\n                        <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\"></line>\r\n                    </svg>\r\n                ) : (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"></path>\r\n                    </svg>\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThemeToggle;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Notification = ({ notifications, onDismiss }) => {\r\n  const [notificationQueue, setNotificationQueue] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (notifications && notifications.length > 0) {\r\n      // Add new notifications to the queue\r\n      setNotificationQueue(prev => [...prev, ...notifications]);\r\n    }\r\n  }, [notifications]);\r\n\r\n  // Auto-dismiss notifications after 5 seconds\r\n  useEffect(() => {\r\n    if (notificationQueue.length > 0) {\r\n      const timer = setTimeout(() => {\r\n        dismissNotification(notificationQueue[0].id);\r\n      }, 5000);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [notificationQueue]);\r\n\r\n  const dismissNotification = (id) => {\r\n    setNotificationQueue(prev => prev.filter(note => note.id !== id));\r\n    if (onDismiss) onDismiss(id);\r\n  };\r\n\r\n  if (notificationQueue.length === 0) return null;\r\n\r\n  return (\r\n    <div className=\"notification-container\">\r\n      {notificationQueue.map(note => (\r\n        <div \r\n          key={note.id} \r\n          className={`notification ${note.type || 'info'}`}\r\n        >\r\n          <div className=\"notification-content\">\r\n            <div className=\"notification-title\">{note.title}</div>\r\n            <div className=\"notification-message\">{note.message}</div>\r\n          </div>\r\n          <button \r\n            className=\"notification-dismiss\" \r\n            onClick={() => dismissNotification(note.id)}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport Dashboard from './Dashboard';\nimport ThemeToggle from './ThemeToggle';\nimport Notification from './Notification';\n\nconst App = () => {\n    const [darkMode, setDarkMode] = useState(\n        // Check for saved preference or use system preference\n        localStorage.getItem('theme') === 'dark' || \n        (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)\n    );\n    \n    const [notifications, setNotifications] = useState([]);\n\n    const toggleDarkMode = () => {\n        setDarkMode(!darkMode);\n    };\n\n    // Method to add a new notification\n    const addNotification = (notification) => {\n        setNotifications(prev => [\n            ...prev,\n            { \n                id: Date.now(), \n                ...notification \n            }\n        ]);\n    };\n    \n    // Method to dismiss a notification\n    const dismissNotification = (id) => {\n        setNotifications(prev => prev.filter(note => note.id !== id));\n    };\n    \n    // Apply theme changes to HTML\n    useEffect(() => {\n        // Update data-theme attribute\n        document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\n        \n        // Save preference to localStorage\n        localStorage.setItem('theme', darkMode ? 'dark' : 'light');\n    }, [darkMode]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"header-container\">\n                <h1>Cryptocurrency Dashboard</h1>\n                <ThemeToggle darkMode={darkMode} toggleDarkMode={toggleDarkMode} />\n            </div>\n            \n            <Dashboard \n                onPriceAlert={(currency, message, type) => {\n                    addNotification({\n                        title: `${currency} Alert`,\n                        message,\n                        type\n                    });\n                }}\n            />\n            \n            <Notification \n                notifications={notifications} \n                onDismiss={dismissNotification} \n            />\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './assets/styles/main.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}